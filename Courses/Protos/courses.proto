syntax = "proto3";

option csharp_namespace = "Courses.Grpc";

package courses;

import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";

// The courses service definition
service CoursesApi {
  // Lists all events
  rpc ListEvents (ListEventsRequest) returns (ListEventsResponse);
  rpc SignInWithPassword (SignInWithPasswordRequest) returns (SignInResponse);
  rpc GetCurrentUser (EmptyRequest) returns (GetCurrentUserResponse);
  rpc SignOut (EmptyRequest) returns (SignOutResponse);
  rpc RegisterUser (UserRegistrationRequest) returns (UserRegistrationResponse);
}

enum EventType {
  Seminar = 0;
  Webinar = 1;
}

// Concrete DB models
message Event {
  UUID id = 1;
  string title_en = 2;
  google.protobuf.StringValue title_pl = 3;
  google.protobuf.Timestamp starts_at = 4;
  google.protobuf.Timestamp ends_at = 5;
  google.protobuf.Timestamp created_at = 6;
  google.protobuf.Timestamp updated_at = 7;
  string description_en = 8;
  google.protobuf.StringValue description_pl = 9;
  bool is_virtual = 10;
  google.protobuf.StringValue venue = 11;
  repeated Host hosts = 12;
  EventType event_type = 13;
}

message User {
  UUID id = 1;
  string email = 2;
  optional string salutation = 3;
  string given_name = 4;
  string family_name = 5;
  optional string country = 6;
  optional string profession = 7;
  optional string organization = 8;
  optional string company = 9;
  google.protobuf.Timestamp created_at = 10;
  google.protobuf.Timestamp updated_at = 11;
  optional google.protobuf.Timestamp last_login_at = 12;
  optional string last_login_ip = 13;
}

message Host {
  UUID id = 1;
  optional string salutation = 2;
  string given_name = 3;
  string family_name = 4;
  google.protobuf.Timestamp created_at = 5;
  google.protobuf.Timestamp updated_at = 6;
  optional string profile_picture_url = 7;
}

// UUID message for ID representation
message UUID {
  string value = 1;
}

message ErrorMessage {
  string key = 1;
  string msg = 2;
}


message EmptyRequest {}

// Request for listing events
message ListEventsRequest {
  // Can add filters here if needed in the future
}

// Response containing the list of events
message ListEventsResponse {
  repeated Event events = 1;
}

message SignInWithPasswordRequest {
  string email = 1;
  string password = 2;
}

message SignInResponse {
  bool success = 1;
  repeated ErrorMessage errors = 2;
  optional bytes access_token = 3;
}

message SignOutResponse {
  bool success = 1;
}

message GetCurrentUserResponse {
  optional User user = 1;
}

message UserRegistrationRequest {
  string email = 1;
  string password = 2;
  string password_confirmation = 3;
  string given_name = 4;
  string family_name = 5;
}

message UserRegistrationResponse {
  bool success = 1;
  repeated ErrorMessage errors = 2;
  optional User user = 3;
}